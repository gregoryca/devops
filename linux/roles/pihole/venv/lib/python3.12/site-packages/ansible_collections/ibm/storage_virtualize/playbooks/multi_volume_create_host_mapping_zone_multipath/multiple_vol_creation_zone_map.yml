- name: Using Storage Virtualize collection to migrate given volumes
  hosts: localhost
  vars_files:
    - multiple_vol_creation_zone_map_vars
  vars:
    brocade_credentials:
      fos_ip_addr: "{{ brocade_switch_ip }}"
      fos_user_name: "{{ brocade_switch_username }}"
      fos_password: "{{ brocade_switch_password }}"
      https: 'False'
  gather_facts: false
  connection: local
  tasks:

    - name: Fetch authorization token for source
      register: specv_token
      ibm.storage_virtualize.ibm_svc_auth:
        clustername: "{{ cluster_ip }}"
        username: "{{ cluster_username }}"
        password: "{{ cluster_password }}"

    - name: Get details of the targetportfc
      register: fcdetails
      ibm.storage_virtualize.ibm_svc_info:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        gather_subset: [targetportfc]
        log_path: /tmp/fcdetails.debug

    - name: Get the WWPN list from lstargetportfc for given fc_port_id
      ansible.builtin.set_fact:
        specv_wwpn: "{{ specv_wwpn | default([]) + [item['WWPN']] }}"
      when: (item.protocol == 'scsi' and item.host_io_permitted == 'yes' and item.fc_io_port_id in cluster_fcioportid)
      loop: "{{ fcdetails.TargetPortFC }}"

    - name: Modify specv wwpn the way switch want
      ansible.builtin.set_fact:
        specv_wwpn_switch_format: "{{ specv_wwpn_switch_format | default([]) + [item | map('join') | join(':')] }}"
      loop: "{{ (specv_wwpn) | map('batch', 2) | map('list') | list | lower }}"

    - name: Get all zoning information from switch
      brocade.fos.brocade_facts:
        credential: "{{ brocade_credentials }}"
        vfid: -1
        gather_subset:
          - brocade_zoning

    - name: Copy the active config in var active_switch_config
      ansible.builtin.set_fact:
        active_switch_config: "{{ ansible_facts.brocade_zoning['effective-configuration'].cfg_name }}"

    - name: Create zones on Brocade switch
      vars:
        zone:
          - name: "{{ application_host_zone_name }}"
            members: "{{ application_host_wwpns + specv_wwpn_switch_format }}"
      brocade.fos.brocade_zoning_zone:
        credential: "{{ brocade_credentials }}"
        vfid: -1
        zones: "{{ zone }}"
        members_add_only: 'True'

    - name: Add zone to active configuration
      vars:
        cfgs:
          - name: "{{ active_switch_config }}"
            members:
              - "{{ application_host_zone_name }}"
      brocade.fos.brocade_zoning_cfg:
        credential: "{{ brocade_credentials }}"
        vfid: -1
        members_add_only: 'True'
        cfgs: "{{ cfgs }}"
        active_cfg: "{{ active_switch_config }}"

    - name: Create host list for specv without colon format
      ansible.builtin.set_fact:
        application_host_wwpns_specvformat_list: "{{ application_host_wwpns_specvformat_list | default([]) + [(item | replace(':', '')) | upper] }}"
      loop: "{{ application_host_wwpns }}"

    - name: Create host list for specv without colon format
      ansible.builtin.set_fact:
        application_host_wwpns_specvformat: "{{ application_host_wwpns_specvformat | default('') + item + ':' }}"
      loop: "{{ application_host_wwpns_specvformat_list | select() }}"

    - name: Application host
      ansible.builtin.set_fact:
        application_host_wwpns_specvformat: "{{ application_host_wwpns_specvformat[:-1] }}"

    - name: Creating Host on specv
      ibm.storage_virtualize.ibm_svc_host:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        name: "{{ host_name }}"
        state: present
        fcwwpn: "{{ application_host_wwpns_specvformat }}"

    - name: Create a fc porset
      ibm.storage_virtualize.ibm_svc_manage_portset:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        name: "{{ portset_name }}"
        porttype: fc
        portset_type: host
        state: present

    - name: Add port ID to the portset
      ibm.storage_virtualize.ibm_sv_manage_fcportsetmember:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        name: "{{ portset_name }}"
        fcportid: "{{ item }}"
        state: present
      loop: "{{ cluster_fcioportid }}"

    - name: Create vdisk
      register: results_cvdisk
      ibm.storage_virtualize.ibm_svc_manage_volume:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        domain:
        state: present
        name: "{{ item.vol_name }}"
        pool: "{{ item.mdiskgrp }}"
        size: "{{ item.size }}"
        unit: "{{ item.unit }}"
      loop: "{{ volume_details }}"

    - name: Map Host to Vdisk
      ibm.storage_virtualize.ibm_svc_vol_map:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        domain:
        state: present
        volname: "{{ item.vol_name }}"
        host: "{{ host_name }}"
      loop: "{{ volume_details }}"

    - name: Rescan the paths on the host and run multipath
      ansible.builtin.shell: |
        "ssh {{ application_host_username }}@{{ application_host_ip }}rescan-scsi-bus.sh -i --forcerescan;sleep 40;"
      changed_when: false

    - name: Connecting over ssh
      ansible.builtin.shell: |
        "ssh {{ application_host_username }}@{{ application_host_ip }}multipath -ll"
      register: ps
      changed_when: false

    - name: Separate facts
      ansible.builtin.set_fact:
        multipath_var: "{{ ps.stdout.split('mpath') }}"

    - name: Multipath variable
      ansible.builtin.debug:
        msg: "{{ multipath_var }}"

    - name: Get deatils of the given volume
      register: volinfo
      ibm.storage_virtualize.ibm_svc_info:
        clustername: "{{ cluster_ip }}"
        token: "{{ specv_token.token }}"
        gather_subset: [vol]
        log_path: /tmp/volinfo.debug

    - name: Create volume list
      ansible.builtin.set_fact:
        vol_name_list: "{{ vol_name_list | default([]) + [item['vol_name']] }}"
      loop: "{{ volume_details }}"

    - name: Volume name
      ansible.builtin.debug:
        msg: "{{ vol_name_list }}"

    - name: Find vollist data
      ansible.builtin.set_fact:
        vol_list_full_data: "{{ vol_list_full_data | default([]) + [item] }}"
        vol_name_uid: "{{ vol_name_uid | default([]) + [[item['volume_name'], item['vdisk_UID'] | lower]] }}"
      when: (item.volume_name in vol_name_list)
      loop: "{{ volinfo.Volume }}"

    - name: Volume name uid
      ansible.builtin.debug:
        msg: "{{ vol_name_uid }}"

    - name: Find vdisk UID present in host with path
      ansible.builtin.set_fact:
        dm_device: "{{ dm_device | default([]) +[ [item.0] + [item.1] + [item.2]] }}"
      when: (item.1 in item.2)
      with_nested:
        - "{{ vol_name_uid }}"
        - "{{ multipath_var }}"

    - name: Find unmapped volume
      ansible.builtin.set_fact:
        vdisk_mapped_multipath: "{{ vdisk_mapped_multipath | default([]) + [item[0]] }}"
      loop: "{{ dm_device }}"

    - name: Multipath variable
      ansible.builtin.debug:
        msg: "{{ vdisk_mapped_multipath }}"

    - name: Find unmapped volume
      ansible.builtin.set_fact:
        unmaped_vol_name_list: "{{ unmaped_vol_name_list | default([]) + [item] }}"
      when: (item not in vdisk_mapped_multipath)
      loop: "{{ vol_name_list }}"

    - name: Vol name list
      ansible.builtin.debug:
        msg: "{{ unmaped_vol_name_list }}"
