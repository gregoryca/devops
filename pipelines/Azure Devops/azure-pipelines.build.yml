pool:
  vmImage: 'ubuntu-latest'

trigger:
  branches:
    include:
      - main

stages:
  - stage: "runCheckov"
    displayName: "Checkov - Scan Terraform files"
    jobs:
      - job: "runCheckov"
        displayName: "Checkov > Pull, run and publish results of Checkov scan"
        steps:
          - bash: |
              docker pull bridgecrew/checkov
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Pull > bridgecrew/checkov"
          - bash: |
              docker run --volume $(pwd):/tf bridgecrew/checkov --directory /tf --output junitxml --soft-fail > $(pwd)/CheckovReport.xml
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Run > checkov"
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'CheckovReport.xml'
              testRunTitle: 'Checkov Results'
            displayName: "Publish Checkov scan results"

  - stage: Validate
    displayName:  Validate Terraform Deployment
    # dependsOn:
    #   - "runCheckov"
    jobs:
      - job: "TerraformJobs"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'

          - task: TerraformCLI@0
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: ''
              backendAzureRmSubscriptionId: ''
              backendAzureRmResourceGroupName: ''
              backendAzureRmStorageAccountName: ''
              backendAzureRmContainerName: 'terraformstorage'
              backendAzureRmKey: 'terraformstorage.state'

          - task: TerraformCLI@0
            displayName: 'Terraform - Format'            
            inputs:
              command: 'fmt'

          - task: TerraformCLI@0
            displayName: 'Terraform - Validate'
            inputs:
              command: 'validate'

  - stage: Build
    displayName: Build Terraform Plan
    dependsOn: Validate
    jobs:
      - job: "TerraformJobs"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'

          - task: TerraformCLI@0
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: ''
              backendAzureRmSubscriptionId: ''
              backendAzureRmResourceGroupName: ''
              backendAzureRmStorageAccountName: ''
              backendAzureRmContainerName: 'terraformstorage'
              backendAzureRmKey: 'terraformstorage.state'

          - task: TerraformCLI@0
            displayName: 'Terraform - Plan'
            inputs:
              command: 'plan'
              environmentServiceName: ''
              commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode'
              publishPlanResults: 'PlanResults'
            name: terraform
            
          - task: TerraformCLI@0
            inputs:
              command: "show"
              #environmentServiceName: "$(SUBSCRIPTION_NAME)"
              inputTargetPlanOrStateFilePath: "$(System.DefaultWorkingDirectory)/terraform.tfplan"
            displayName: "Terraform - Show Plan"
          
          - bash: |
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = false ] ; then
                echo "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                echo "##vso[task.logissue type=warning]Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = true ] ; then
                echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                echo "##vso[task.logissue type=warning]Changes with Destroy detected, pipeline will require a manual approval to proceed"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" != true ] ; then
                echo "##vso[task.logissue type=warning]No changes detected, terraform apply will not run"
              fi
            name: "setvar"
            displayName: "Set Variables for next stage"

  - stage: "Auto_Approval"
    displayName: Deploy IaC - Auto Approval
    dependsOn: Build
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.Build.outputs['TerraformJobs.setvar.HAS_CHANGES_ONLY'], 'true')
        )
    jobs:
      - job:
        steps:

        - task: TerraformInstaller@0
          inputs:
            terraformVersion: 'latest'
            
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            backendType: 'azurerm'
            backendAzureRmSubscriptionId: ''
            backendAzureRmResourceGroupName: ''
            backendAzureRmStorageAccountName: ''
            backendAzureRmContainerName: 'terraformstorage'
            backendServiceArm: ''
            backendAzureRmKey: 'terraformstorage.state'

        - task: TerraformCLI@0
          displayName: 'terraform apply'
          inputs:
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceName: ''

  - stage: "Manual_Approval"
    displayName: "Deploy IaC - Manual Approval"
    dependsOn:
      - Build
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.Build.outputs['TerraformJobs.setvar.HAS_DESTROY_CHANGES'], 'true')
        )
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                aquiles.craane@gmail.com
              instructions: "There are resources being destroyed as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "DeployAfterValidation"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
              
          - task: TerraformCLI@0
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendAzureRmSubscriptionId: ''
              backendAzureRmResourceGroupName: ''
              backendAzureRmStorageAccountName: ''
              backendAzureRmContainerName: 'terraformstorage'
              backendServiceArm: ''
              backendAzureRmKey: 'terraformstorage.state'

          - task: TerraformCLI@0
            displayName: 'terraform apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              environmentServiceName: ''